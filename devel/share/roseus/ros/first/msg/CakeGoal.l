;; Auto-generated. Do not edit!


(when (boundp 'first::CakeGoal)
  (if (not (find-package "FIRST"))
    (make-package "FIRST"))
  (shadow 'CakeGoal (find-package "FIRST")))
(unless (find-package "FIRST::CAKEGOAL")
  (make-package "FIRST::CAKEGOAL"))

(in-package "ROS")
;;//! \htmlinclude CakeGoal.msg.html


(defclass first::CakeGoal
  :super ros::object
  :slots (_num_cakes ))

(defmethod first::CakeGoal
  (:init
   (&key
    ((:num_cakes __num_cakes) 0)
    )
   (send-super :init)
   (setq _num_cakes (round __num_cakes))
   self)
  (:num_cakes
   (&optional __num_cakes)
   (if __num_cakes (setq _num_cakes __num_cakes)) _num_cakes)
  (:serialization-length
   ()
   (+
    ;; int64 _num_cakes
    8
    ))
  (:serialize
   (&optional strm)
   (let ((s (if strm strm
              (make-string-output-stream (send self :serialization-length)))))
     ;; int64 _num_cakes
#+(or :alpha :irix6 :x86_64)
       (progn (sys::poke _num_cakes (send s :buffer) (send s :count) :long) (incf (stream-count s) 8))
#-(or :alpha :irix6 :x86_64)
       (cond ((and (class _num_cakes) (= (length (_num_cakes . bv)) 2)) ;; bignum
              (write-long (ash (elt (_num_cakes . bv) 0) 0) s)
              (write-long (ash (elt (_num_cakes . bv) 1) -1) s))
             ((and (class _num_cakes) (= (length (_num_cakes . bv)) 1)) ;; big1
              (write-long (elt (_num_cakes . bv) 0) s)
              (write-long (if (>= _num_cakes 0) 0 #xffffffff) s))
             (t                                         ;; integer
              (write-long _num_cakes s)(write-long (if (>= _num_cakes 0) 0 #xffffffff) s)))
     ;;
     (if (null strm) (get-output-stream-string s))))
  (:deserialize
   (buf &optional (ptr- 0))
   ;; int64 _num_cakes
#+(or :alpha :irix6 :x86_64)
      (setf _num_cakes (prog1 (sys::peek buf ptr- :long) (incf ptr- 8)))
#-(or :alpha :irix6 :x86_64)
      (setf _num_cakes (let ((b0 (prog1 (sys::peek buf ptr- :integer) (incf ptr- 4)))
                  (b1 (prog1 (sys::peek buf ptr- :integer) (incf ptr- 4))))
              (cond ((= b1 -1) b0)
                     ((and (= b1  0)
                           (<= lisp::most-negative-fixnum b0 lisp::most-positive-fixnum))
                      b0)
                    ((= b1  0) (make-instance bignum :size 1 :bv (integer-vector b0)))
                    (t (make-instance bignum :size 2 :bv (integer-vector b0 (ash b1 1)))))))
   ;;
   self)
  )

(setf (get first::CakeGoal :md5sum-) "6d3e30b2ed75c520b8f2ca1010c57ae6")
(setf (get first::CakeGoal :datatype-) "first/CakeGoal")
(setf (get first::CakeGoal :definition-)
      "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
int64 num_cakes

")



(provide :first/CakeGoal "6d3e30b2ed75c520b8f2ca1010c57ae6")


